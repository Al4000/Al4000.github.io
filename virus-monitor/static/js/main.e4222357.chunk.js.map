{"version":3,"sources":["logo.svg","List.js","World.js","Russia.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","state","data","isFetching","error","fetch","then","response","blob","images","imageUrl","window","URL","webkitURL","createObjectURL","setState","this","src","alt","className","React","Component","World","json","result","statistic_taken_at","new_cases","new_deaths","total_cases","total_deaths","total_recovered","Russia","latest_stat_by_country","maxDate","record_date","slice","maxNumber","split","country_name","total_cases_per1m","App","logo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e4222357.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={ data: {}, isFetching: true, error: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/random_masks_usage_instructions.php\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"ba93fb142dmshe40f2ac24d1897dp1e3b54jsnd84963926b4b\"\r\n            }\r\n        })\r\n            .then(response => response.blob())\r\n            .then(images => {\r\n                const urlCreator = window.URL || window.webkitURL;\r\n                const imageUrl = urlCreator.createObjectURL(images);\r\n                this.setState({data: imageUrl, isFetching: false })\r\n            })\r\n\r\n        // .catch(e => {\r\n        //     console.log(e);\r\n        //     this.setState({data: '', isFetching: false, error: e }));\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { data, isFetching, error } = this.state;\r\n\r\n        if (isFetching) return <div>...Loading</div>;\r\n\r\n\r\n        return  (\r\n            <img src={data} alt=\"\" className=\"list__img\"/>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class World extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={ data: {}, isFetching: true, error: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"ba93fb142dmshe40f2ac24d1897dp1e3b54jsnd84963926b4b\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({data: result, isFetching: false })\r\n            })\r\n\r\n        // .catch(e => {\r\n        //     console.log(e);\r\n        //     this.setState({data: '', isFetching: false, error: e }));\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { data, isFetching, error } = this.state;\r\n\r\n        if (isFetching) return <div>...Loading</div>;\r\n\r\n        // if (error) return <div>{`Error: ${e.message}`}</div>;\r\n        return (\r\n            <div className=\"col\">\r\n                <ul className=\"list\">\r\n                    <li>\r\n                        <h2>World</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Статистика на:</p><h2>{data.statistic_taken_at}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Новых случаев:</p><h2>{data.new_cases}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Летальных за день:</p><h2>{data.new_deaths}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего случаев:</p><h2>{data.total_cases}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего смертей:</p><h2>{data.total_deaths}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего выздоровело:</p><h2>{data.total_recovered}</h2>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class Russia extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { data: {}, isFetching: true, error: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=Russia\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"ba93fb142dmshe40f2ac24d1897dp1e3b54jsnd84963926b4b\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({data: result.latest_stat_by_country[0], isFetching: false })\r\n            })\r\n\r\n        // .catch(e => {\r\n        //     console.log(e);\r\n        //     this.setState({data: '', isFetching: false, error: e }));\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { data, isFetching, error } = this.state;\r\n\r\n        if (isFetching) return <div>...Loading</div>;\r\n\r\n        const maxDate = data.record_date.slice(0, 10);\r\n        const maxNumber = data.record_date.split('.')[1];\r\n        // if (error) return <div>{`Error: ${e.message}`}</div>;\r\n        return (\r\n            <div className=\"col\">\r\n                <ul className=\"list\">\r\n                    <li>\r\n                        <h2>{data.country_name}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Новых случаев:</p><h2>{data.new_cases}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Летальных за день:</p><h2>{data.new_deaths}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего случаев:</p><h2>{data.total_cases}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего смертей:</p><h2>{data.total_deaths}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Всего выздоровело:</p><h2>{data.total_recovered}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Заражений в минуту:</p><h2>{data.total_cases_per1m}</h2>\r\n                    </li>\r\n                    <li>\r\n                        <p>Максимально за день:</p><h2>{maxNumber} ({maxDate})</h2>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport List from './List'\r\nimport logo from './logo.svg'\r\nimport './App.css';\r\nimport World from \"./World\";\r\nimport Russia from \"./Russia\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n          <img src={logo} alt=\"\" className=\"app-logo\" />\r\n          <h4>Coronavirus Monitor</h4>\r\n          <h6>for Polytologs & Virusologs</h6>\r\n      </header>\r\n      <div className=\"wrap\">\r\n        <World />\r\n        <Russia />\r\n      </div>\r\n      <List />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { HashRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}